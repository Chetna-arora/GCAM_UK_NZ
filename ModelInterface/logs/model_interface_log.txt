PROPERTY CHANGEtitle
PROPERTY CHANGEdocument-replaced
DOCUMENT REPLACED
PROPERTY CHANGEdocument-replaced
DOCUMENT REPLACED
Going to change controls
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Didn't find builder for detailed land allocation query going to use defaults
Didn't find builder for land allocation by crop query going to use defaults
Didn't find builder for aggregated land allocation query going to use defaults
Didn't find builder for land allocation in a specified land use region query going to use defaults
Didn't find builder for land allocation by crop and water source query going to use defaults
Didn't find builder for LUC emissions by region query going to use defaults
Didn't find builder for LUC emissions by LUT query going to use defaults
Didn't find builder for LUC emissions by LUT in a specified land use region query going to use defaults
Didn't find builder for vegetative carbon stock by region query going to use defaults
Didn't find builder for profit rate query going to use defaults
Didn't find builder for profit rate in a specified land use region query going to use defaults
Didn't find builder for land leaf shares query going to use defaults
Didn't find builder for land leaf shares in a specified land use region query going to use defaults
About to perform query: collection()/singleQueryListCache/cache[@id=1711407739]/text()
Time : 5
About to perform query: collection()/singleQueryListCache/cache[@id=-789746245]/text()
Time : 1
About to perform query: collection()/singleQueryListCache/cache[@id=-789746245]/text()
Time : 1
About to perform query: collection()/singleQueryListCache/cache[@id=1406594184]/text()
Time : 1
About to perform query: collection()/singleQueryListCache/cache[@id=143289648]/text()
Time : 2
About to perform query: collection()/singleQueryListCache/cache[@id=1557535450]/text()
Time : 2
Before Function: 1731404298025
About to perform query: collection()/scenario[ (@name='Net_Zero' and @date='2024-12-11T14:30:40+05:30') ]/world/region[ (@name='UK') ]/*[@type='sector' (:collapse:) and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]//
               *[@type='input' (:collapse:) and not (@name='renewable')]/
               demand-physical[@unit='EJ']/node()
In Function: 1731404298025
After build Tree: 1731404298081
After Add table: 1731404298081
About to perform query: collection()/singleQueryListCache/cache[@id=-1013073716]/text()
Time : 2
About to perform query: collection()/singleQueryListCache/cache[@id=-1895300858]/text()
Time : 7
Before Function: 1731404306103
About to perform query: collection()/scenario[ (@name='Net_Zero' and @date='2024-12-11T14:30:40+05:30') ]/world/region[ (@name='UK') ]/*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/
               *[@type='subsector']//*[@type='input' and not (@name='renewable')]/
               demand-physical[@unit='EJ']/node()
In Function: 1731404306105
After build Tree: 1731404306129
After Add table: 1731404306130
About to perform query: collection()/singleQueryListCache/cache[@id=1969764723]/text()
Time : 1
About to perform query: collection()/singleQueryListCache/cache[@id=163235866]/text()
Time : 1
Before Function: 1731404320911
About to perform query: collection()/scenario[ (@name='Net_Zero' and @date='2024-12-11T14:30:40+05:30') ]/world/region[ (@name='UK') ]/*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/
               *[@type='subsector']/*[@type='technology']/*[@type='input' and not(@name='renewable')]/
               demand-physical[@unit='EJ']/node()
In Function: 1731404320912
After build Tree: 1731404320936
After Add table: 1731404320937
About to perform query: collection()/singleQueryListCache/cache[@id=-693796600]/text()
Time : 2
About to perform query: collection()/singleQueryListCache/cache[@id=-1421281580]/text()
Time : 1
About to perform query: collection()/singleQueryListCache/cache[@id=593830562]/text()
Time : 1
Before Function: 1731404348292
About to perform query: collection()/scenario[ (@name='Net_Zero' and @date='2024-12-11T14:30:40+05:30') ]/world/region[ (@name='UK') ]/*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]//
               *[@type='output' (:collapse:)]/physical-output[
                      @unit='million pass-km' or @unit='million ton-km']/node()
In Function: 1731404348294
After build Tree: 1731404348325
After Add table: 1731404348325
Removing :Net_Zero1112112013
Removing :Net_Zero1112121755
Removing :Net_Zero1112125914
Removing :Net_Zero1112133846
Removing :Net_Zero1112140215
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Before Function: 1731404419430
About to perform query: collection()/scenario[ (@name='Net_Zero' and @date='2024-12-11T14:30:40+05:30') ]/world/region[ (@name='UK') ]/*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]//
               *[@type='input' (:collapse:) and not (@name='renewable')]/demand-physical[@unit='EJ']/node()
In Function: 1731404419431
After build Tree: 1731404419447
After Add table: 1731404419447
Before Function: 1731404447435
About to perform query: collection()/scenario[ (@name='Net_Zero' and @date='2024-12-11T14:30:40+05:30') ]/world/region[ (@name='UK') ]/*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]//
               *[@type='output' (:collapse:)]/physical-output[
                      @unit='million pass-km' or @unit='million ton-km']/node()
In Function: 1731404447436
After build Tree: 1731404447456
After Add table: 1731404447456
Removing :Net_Zero1110231132
Removing :Net_Zero1111000704
Removing :Net_Zero1111174240
Removing :Net_Zero1111221537
Removing :Net_Zero1112104915
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
About to perform query: collection()/scenario[@date='2024-12-11T14:30:40+05:30' and @name='Net_Zero']/@name
About to perform query: collection()/scenario
Before Function: 1731404506927
About to perform query: collection()/scenario[ (@name='Reference' and @date='2024-12-11T14:30:40+05:30') ]/world/region[ (@name='UK') ]/*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]//
               *[@type='output' (:collapse:)]/physical-output[
                      @unit='million pass-km' or @unit='million ton-km']/node()
In Function: 1731404506928
After build Tree: 1731404506970
After Add table: 1731404506970
Before Function: 1731404510342
About to perform query: collection()/scenario[ (@name='Reference' and @date='2024-12-11T14:30:40+05:30') ]/world/region[ (@name='UK') ]/*[@type='sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/
               *[@type='subsector']//*[@type='output' (:collapse:) and not(@name='CAFEcredit')]/
               physical-output/node()
In Function: 1731404510342
After build Tree: 1731404510375
After Add table: 1731404510375
About to perform query: collection()/singleQueryListCache/cache[@id=-945885288]/text()
Time : 1
Before Function: 1731404602270
About to perform query: collection()/scenario[ (@name='Reference' and @date='2024-12-11T14:30:40+05:30') ]/world/region[ (@name='UK') ]/*[@type='sector' (:collapse:)]//CO2/emissions/node()
In Function: 1731404602271
After build Tree: 1731404602312
After Add table: 1731404602312
About to perform query: collection()/singleQueryListCache/cache[@id=-310400712]/text()
Time : 1
Before Function: 1731404607450
About to perform query: collection()/scenario[ (@name='Reference' and @date='2024-12-11T14:30:40+05:30') ]/world/region[ (@name='UK') ]/*[@type='sector']//CO2/emissions/node()
In Function: 1731404607451
After build Tree: 1731404607488
After Add table: 1731404607488
About to perform query: collection()/singleQueryListCache/cache[@id=1907372754]/text()
Time : 1
Before Function: 1731404673978
About to perform query:  
            declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
            let $scn := $parent/ancestor::scenario,
            $rgn := $parent (: /ancestor::region :)
            return
            document { element scenario {
            $scn/@*,
            element region {
            $rgn/@*,
            $append
            }
            }
            }
            (: I can get by with just the scenario and region
            let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
            return
            if(local-name($parent) != 'scenario')
            then local:append-heirarchy($parent/parent::*, $new_node)
            else document { $new_node } :)
            }; 
            declare function local:get-carbon-coef($good as xs:string) as xs:decimal {
            let $carbonCoefs := (
            <PrimaryFuelCO2Coef name="biomass">0</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="coal">27.3</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="crude oil">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="delivered biomass">23</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="delivered coal">27.3</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="delivered gas">14.2</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="gas pipeline">14.2</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="gas processing">14.2</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="limestone">0.08</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="natural gas">14.2</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="refined liquids enduse">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="refined liquids industrial">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="refining">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional biomass">23</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional biomassOil">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional coal">27.3</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional corn for ethanol">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional natural gas">14.2</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional oil">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional sugar for ethanol">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="traded unconventional oil">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="unconventional oil">21.1</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="unconventional oil production">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="wholesale gas">14.2</PrimaryFuelCO2Coef>),
            $currCoef := $carbonCoefs[@name=$good]/text()
            return if(exists($currCoef)) then $currCoef else 0.0
            };
            
            
            declare function local:is-carbonatious-fuel($good as xs:string) as xs:boolean {
            not(local:get-carbon-coef($good) = 0.0)
            };
            declare function local:generate-sector-output-coefs($inputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
            if(empty($inputNameQueue)) then $coefs
            else if( exists($coefs[@name = $inputNameQueue[1]]) or exists(index-of(('traded unconventional oil'),
            $inputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$inputNameQueue[1]]) or not(local:is-carbonatious-fuel($inputNameQueue[1])))
            then 
            local:generate-sector-output-coefs(remove($inputNameQueue, 1), $currTree, $coefs, $is_usa)
            else
            let $inputName := $inputNameQueue[1],
            $newInputNameQueue := remove($inputNameQueue, 1),
            $useInputs := $currTree//*[@type='input' and @name=$inputName],
            $useSectors := distinct-values($useInputs/ancestor::*[@type='sector']/@name),
            $totalInputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage)
            return element input {
            attribute vintage { $vintage },
            text {
            sum($useInputs/demand-physical[@vintage=$vintage])
            }
            },
            $new_coefs := if(empty($useSectors)) then
            $coefs
            else
            $coefs | element sector {
            attribute name { $inputName },
            for $output in $useSectors
            return element output {
            attribute name { $output },
            for $inputSum in $totalInputSum
            let $currSectorInputs := $useInputs[ancestor::*[@type='sector' and @name=$output]],
            $outputSum := sum($currSectorInputs/demand-physical[@vintage=$inputSum/@vintage]),
            $carbonIn := sum($currSectorInputs/parent::*//carbon-content[@vintage=$inputSum/@vintage]),
            $carbonOut := sum($currSectorInputs/parent::*/output-primary/physical-output[@vintage=$inputSum/@vintage]) *
            local:get-carbon-coef($output)
            return (element share {
            attribute vintage { $inputSum/@vintage },
            text { $outputSum div $inputSum }
            }, element carbon_ratio {
            attribute vintage { $inputSum/@vintage },
            text{ if($carbonIn > 0) then $carbonOut div $carbonIn else 0 }
            })
            }
            }
            return 
            local:generate-sector-output-coefs(distinct-values(($newInputNameQueue, $useSectors)), $currTree, $new_coefs, $is_usa)
            };
            declare function local:apply-coefs($outputName as xs:string, $emissions as node()*, $coefs as node()*) as node()* {
            if(exists($coefs[@name=$outputName]) and abs(sum($emissions)) > 0.001) then
            for $output in $coefs[@name=$outputName]/output
            let $emiss_go := for $year in distinct-values($emissions/@year)
            let $emissThisVintage := $emissions[@year=$year],
            $firstEmiss := $emissThisVintage[1],
            $emissSum := sum($emissThisVintage),
            $shareThisVintage := $output/share[@vintage=$year],
            $carbonRatioThisVintage := $output/carbon_ratio[@vintage=$year],
            $coefThisVintage := $shareThisVintage * $carbonRatioThisVintage
            where $coefThisVintage > 0
            return element { local-name($firstEmiss) } {
            $firstEmiss/@*,
            text{ $emissSum * $coefThisVintage }
            },
            $emiss_stay := for $year in distinct-values($emissions/@year)
            let $emissThisVintage := $emissions[@year=$year],
            $firstEmiss := $emissThisVintage[1],
            $emissSum := sum($emissThisVintage),
            $shareThisVintage := $output/share[@vintage=$year],
            $carbonRatioThisVintage := 1.0 - $output/carbon_ratio[@vintage=$year],
            $coefThisVintage := $shareThisVintage * $carbonRatioThisVintage 
            where $coefThisVintage > 0
            return element { local-name($firstEmiss) } {
            $firstEmiss/@*,
            text{ $emissSum * $coefThisVintage }
            }
            return local:apply-coefs($output/@name, $emiss_go, $coefs) |
            element sector {
            attribute name { $output/@name},
            attribute type { 'sector' },
            $emiss_stay
            }
            else if( abs(sum($emissions)) > 0.001) then
            element sector {
            attribute name { $outputName },
            attribute type { 'sector' },
            $emissions
            }
            else
            (: These are the residuals from chasing simulenaties, I've left this here
            for debuging purposes :)
            element sector {
            attribute name { $outputName },
            attribute type { 'sector' }(:,
            $emissions:)
            }
            };
            declare function local:run-emiss-by-enduse($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string*) as node()* { 	
            (:unordered { :) 	
            let $regionsG := if(not($regions[1] = 'Global'))
            then $regions
            else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
            return
            for $scenario in $scenarios, 	    
            $region in $regionsG 	
            let $scenario_split := tokenize($scenario, ' '), 	    
            $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
            $sector_emiss := $currTree/*[@type='sector' and not(@name='regional biomass' or @name='regional biomassOil' or @name='regional corn for ethanol' or @name='regional sugar for ethanol' or @name='regional sugarbeet for ethanol')]//CO2[@type='GHG' (:collapse:) and @name='CO2']/emissions/text(),
            $currEmissSectors := $currTree/*[@type='sector' and (@name='regional biomass' or @name='regional biomassOil' or @name='regional corn for ethanol' or @name='regional sugar for ethanol' or @name='regional sugarbeet for ethanol')],
            $coefs := local:generate-sector-output-coefs(distinct-values($currEmissSectors/@name), $currTree, (), false()),
            $downstream_emiss := for $sectorName in distinct-values($currEmissSectors/@name)
            return local:append-heirarchy($currTree, local:apply-coefs($sectorName, $currEmissSectors[@name=$sectorName]//CO2[@name='CO2']/emissions, $coefs))//text() 
            return ($sector_emiss, $downstream_emiss )
            (:  } :)
            };
            local:run-emiss-by-enduse(('Reference 2024-12-11T14:30:40+05:30'), ('UK'), ())
            
         
In Function: 1731404673991
After build Tree: 1731404674088
After Add table: 1731404674088
Caught the window closing
Doing remove because of control
Doing remove because of control
Doing remove because of control
Doing remove because of control
Doing remove because of control
Doing remove because of control
Doing remove because of control
Doing remove because of control
Doing remove because of control
Doing remove because of control
Doing remove because of control
